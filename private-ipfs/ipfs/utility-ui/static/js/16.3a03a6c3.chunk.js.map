{"version":3,"sources":["components/shell/Shell.js","components/about-ipfs/AboutIpfs.js","welcome/WelcomePage.js"],"names":["Shell","title","children","className","withTranslation","t","i18nKey","target","rel","href","ConnectionStatus","connected","sameOrigin","defaultDomains","origin","window","location","addOrigin","indexOf","join","ApiAddressForm","props","onChange","event","val","value","setState","onKeyPress","key","onSubmit","a","async","preventDefault","updateAddress","state","defaultValue","this","htmlFor","id","type","React","Component","connect","doUpdateIpfsApiAddress","apiUrl","ipfsInitFailed","ipfsConnected","ipfsReady","ipfsApiAddress","pastDelay","isSameOrigin","style","maxWidth"],"mappings":"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","file":"static/js/16.3a03a6c3.chunk.js","sourcesContent":["import React from 'react'\n\nconst Shell = ({\n  title = 'Shell',\n  children\n}) => {\n  return (\n    <div className='mw6 br1 overflow-hidden'>\n      <div className='f7 mb0 sans-serif ttu tracked charcoal pv1 pl2 bg-black-20'>Shell</div>\n      <div className='bg-black-70 snow pa2 f7 lh-copy monospace nowrap overflow-x-auto'>\n        {children}\n      </div>\n    </div>\n  )\n}\n\nexport default Shell\n","import React from 'react'\nimport { withTranslation, Trans } from 'react-i18next'\nimport Box from '../box/Box'\n\nexport const AboutIpfs = ({ t }) => {\n  return (\n    <Box>\n      <h1 className='mt0 mb3 montserrat fw4 f4 charcoal'>{t('aboutIpfs.header')}</h1>\n      <Trans i18nKey='aboutIpfs.paragraph1'>\n        <p className='mt0'><strong>IPFS is a protocol</strong> that defines a content-addressed file system, coordinates content delivery and combines ideas from Kademlia, BitTorrent, Git and more.</p>\n      </Trans>\n      <Trans i18nKey='aboutIpfs.paragraph2'>\n        <p><strong>IPFS is a filesystem.</strong> It has directories and files and mountable filesystem via FUSE.</p>\n      </Trans>\n      <Trans i18nKey='aboutIpfs.paragraph3'>\n        <p><strong>IPFS is a web.</strong> Files are accessible via HTTP gateways like <code className='f7'>https://ipfs.io</code>. Browsers <a className='link blue' target='_blank' rel='noopener noreferrer' href='https://github.com/ipfs-shipyard/ipfs-companion#release-channel'>can be extended</a> to use the <code className='f7'>ipfs://</code> scheme directly, and hash-addressed content guarantees authenticity</p>\n      </Trans>\n      <Trans i18nKey='aboutIpfs.paragraph4'>\n        <p><strong>IPFS is p2p.</strong> It supports worldwide peer-to-peer file transfers with a completely decentralized architecture and no central point of failure.</p>\n      </Trans>\n      <Trans i18nKey='aboutIpfs.paragraph5'>\n        <p><strong>IPFS is a CDN.</strong> Add a file to your local repository, and it's now available to the world with cache-friendly content-hash addressing and bittorrent-like bandwidth distribution.</p>\n      </Trans>\n    </Box>\n  )\n}\n\nexport default withTranslation('welcome')(AboutIpfs)\n","import React from 'react'\nimport { Helmet } from 'react-helmet'\nimport { connect } from 'redux-bundler-react'\nimport { withTranslation, Trans } from 'react-i18next'\nimport Box from '../components/box/Box'\nimport Button from '../components/button/Button'\nimport AboutIpfs from '../components/about-ipfs/AboutIpfs'\nimport Shell from '../components/shell/Shell.js'\nimport ComponentLoader from '../loader/ComponentLoader.js'\n\nconst WelcomePage = ({ t, doUpdateIpfsApiAddress, apiUrl, ipfsInitFailed, ipfsConnected, ipfsReady, ipfsApiAddress }) => {\n  if (!ipfsInitFailed && !ipfsReady) {\n    return <ComponentLoader pastDelay />\n  }\n\n  const isSameOrigin = window.location.origin === apiUrl\n\n  return (\n    <div>\n      <Helmet>\n        <title>{t('title')}</title>\n      </Helmet>\n      <div className='flex'>\n        <div className='flex-auto pr3 lh-copy charcoal'>\n          <Box>\n            <ConnectionStatus connected={ipfsConnected} sameOrigin={isSameOrigin} t={t} />\n            <h1 className='montserrat fw2 navy mb0 mt5 f3 yellow'>{t('configureApiPort.header')}</h1>\n            <Trans i18nKey='configureApiPort.paragraph1'>\n              <p>If your IPFS node is configured with a <a className='link blue' href='https://github.com/ipfs/go-ipfs/blob/master/docs/config.md#addresses' target='_blank' rel='noopener noreferrer'>custom API address</a>, please set it here</p>\n            </Trans>\n            <ApiAddressForm\n              t={t}\n              defaultValue={ipfsApiAddress}\n              updateAddress={doUpdateIpfsApiAddress} />\n          </Box>\n        </div>\n        <div className='measure lh-copy dn db-l flex-none mid-gray f6' style={{ maxWidth: '40%' }}>\n          <AboutIpfs />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst ConnectionStatus = ({ t, connected, sameOrigin }) => {\n  if (connected) {\n    return (\n      <div>\n        <h1 className='montserrat fw2 navy ma0 f3 green'>{t('connected.header')}</h1>\n        <Trans i18nKey='connected.paragraph1'>\n          <p>Now, it's time for you to explore your node. Head to <a className='link blue' href='#/files/'>Files page</a> to manage and share your files, or explore the <a className='link blue' href='https://www.youtube.com/watch?v=Bqs_LzBjQyk'>Merkle Forest</a> of peer-hosted hash-linked data via <a className='link blue' href='#/explore'>IPLD explorer</a>.</p>\n        </Trans>\n        <Trans i18nKey='connected.paragraph2'>\n          <p>You can always come back to this address to change the IPFS node you're connected to.</p>\n        </Trans>\n      </div>\n    )\n  }\n\n  const defaultDomains = ['http://127.0.0.1:5501'] // custom port\n  const origin = window.location.origin\n  const addOrigin = defaultDomains.indexOf(origin) === -1\n\n  return (\n    <div>\n      <h1 className='montserrat fw2 navy ma0 f3 yellow'>{t('notConnected.header')}</h1>\n      <Trans i18nKey='notConnected.paragraph1'>\n        <p>Failed to connect to the API.</p>\n      </Trans>\n      { !sameOrigin && (\n        <div>\n          <Trans i18nKey='notConnected.paragraph2'>\n            <p>Make sure you <a className='link blue' href='https://github.com/ipfs-shipyard/ipfs-webui#configure-ipfs-api-cors-headers'>configure your IPFS API</a> to allow cross-origin (CORS) requests, running the commands below:</p>\n          </Trans>\n          <Shell>\n            <code className='db'>$ ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin '[{addOrigin && `\"${origin}\", `}\"{defaultDomains.join('\", \"')}\"]'</code>\n            <code className='db'>$ ipfs config --json API.HTTPHeaders.Access-Control-Allow-Methods '[\"PUT\", \"POST\"]'</code>\n          </Shell>\n        </div>\n      )}\n      <Trans i18nKey='notConnected.paragraph3'>\n        <p>Start an IPFS daemon in a terminal:</p>\n      </Trans>\n      <Shell>\n        <code className='db'>$ ipfs daemon</code>\n        <code className='db'>Initializing daemon...</code>\n        <code className='db'>API server listening on /ip4/127.0.0.1/tcp/5001</code>\n      </Shell>\n      <Trans i18nKey='notConnected.paragraph4'>\n        <p>For more info on how to get started with IPFS you can <a className='link blue' href='https://docs.ipfs.io/introduction/usage/'>read the guide</a>.</p>\n      </Trans>\n    </div>\n  )\n}\n\nclass ApiAddressForm extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = { value: props.defaultValue }\n  }\n\n  onChange = (event) => {\n    const val = event.target.value\n    this.setState({ value: val })\n  }\n\n  onKeyPress = (event) => {\n    if (event.key === 'Enter') {\n      this.onSubmit(event)\n    }\n  }\n\n  onSubmit = async (event) => {\n    event.preventDefault()\n    this.props.updateAddress(this.state.value)\n  }\n\n  render () {\n    const { t } = this.props\n    return (\n      <form onSubmit={this.onSubmit}>\n        <label htmlFor='api-address' className='db f7 mb2 ttu tracked charcoal pl1'>{t('apiAddressForm.apiLabel')}</label>\n        <input id='api-address'\n          type='text'\n          className='w-100 lh-copy monospace f5 pl1 pv1 mb2 charcoal input-reset ba b--black-20 br1 focus-outline'\n          onChange={this.onChange}\n          onKeyPress={this.onKeyPress}\n          value={this.state.value} />\n        <div className='tr'>\n          <Button>{t('apiAddressForm.submitButton')}</Button>\n        </div>\n      </form>\n    )\n  }\n}\n\nexport default connect(\n  'doUpdateIpfsApiAddress',\n  'selectIpfsInitFailed',\n  'selectIpfsConnected',\n  'selectIpfsReady',\n  'selectIpfsApiAddress',\n  'selectApiUrl',\n  withTranslation('welcome')(WelcomePage)\n)\n"],"sourceRoot":""}